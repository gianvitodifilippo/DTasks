using System.Collections.Immutable;
using System.Text;

namespace DTasks.AspNetCore.Analyzer.Configuration;

internal ref struct ConfigurationSourceBuilder(StringBuilder sb)
{
    public void Begin()
    {
        sb.AppendLine("""
            // <auto-generated />
            
            namespace DTasks.Configuration;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DTasks.AspNetCore.Analyzer", "0.4.0.0")]
            internal static class DTasksAspNetCoreCoreConfigurationBuilderExtensions
            {
                public static TBuilder AutoConfigure<TBuilder>(this TBuilder builder)
                    where TBuilder : IDTasksAspNetCoreCoreConfigurationBuilder
                {
            """);
    }

    public void End()
    {
        sb.Append("""
                    return builder;
                }
            }
            """);
    }

    public void AddServiceTypes(IEnumerable<string> serviceTypes)
    {
        sb.AppendLine("""
                    builder.DTasks.ConfigureServices(services =>
                    {
            """);

        foreach (string serviceType in serviceTypes)
        {
            sb
                .Append("            services.RegisterDAsyncService<")
                .Append(serviceType)
                .AppendLine(">();");
        }

        sb.AppendLine("""
                    });
            """);
    }

    public void AddResultTypes(IEnumerable<string> resultTypes)
    {
        foreach (string resultType in resultTypes)
        {
            sb
                .Append("        builder.RegisterEndpointResult<")
                .Append(resultType)
                .AppendLine(">();");
        }
    }

    public void AddResumptionEndpoints(ImmutableArray<ResumptionEndpointContainer> resumptionEndpoints)
    {
        foreach (ResumptionEndpointContainer resumptionEndpoint in resumptionEndpoints)
        {
            foreach (string member in resumptionEndpoint.Members)
            {
                sb
                    .Append("        builder.AddResumptionEndpoint(")
                    .Append(resumptionEndpoint.Type)
                    .Append('.')
                    .Append(member)
                    .AppendLine(");");
            }
        }
    }
}