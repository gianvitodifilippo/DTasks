using System.Diagnostics;
using System.Text;

namespace DTasks.Analyzer.Configuration;

internal readonly ref struct MarshalingConfigurationSourceBuilder(StringBuilder sb)
{
    public void Begin()
    {
        sb.AppendLine("""
            // <auto-generated />
            
            namespace DTasks.Configuration;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DTasks.Analyzer", "0.4.0.0")]
            internal static class DefaultMarshalingDTasksConfigurationBuilderExtensions
            {
                public static TBuilder AutoConfigure<TBuilder>(this TBuilder builder)
                    where TBuilder : global::DTasks.Configuration.IDTasksConfigurationBuilder
                {
                    builder.ConfigureMarshaling(marshaling => marshaling
                        .ConfigureInfrastructure(infrastructure =>
                        {
            """);
    }

    public void End()
    {
        sb.Append("""
                        }));
                    return builder;
                }
            }
            """);
    }

    public void AddInvocation(InfrastructureMarshalingBuilderInvocation invocation)
    {
        (InfrastructureMarshalingBuilderMethod method, string typeFullName) = invocation;

        switch (method)
        {
            case InfrastructureMarshalingBuilderMethod.SurrogateDTaskOf:
                sb.AppendLine($"                infrastructure.SurrogateDTaskOf<{typeFullName}>();");
                break;
            
            case InfrastructureMarshalingBuilderMethod.AwaitWhenAllOf:
                sb.AppendLine($"                infrastructure.AwaitWhenAllOf<{typeFullName}>();");
                break;
            
            default:
                Debug.Fail("Unhandled method.");
                break;
        }
    }
}