using System.Text;
using Microsoft.CodeAnalysis.CSharp;

namespace DTasks.Analyzer.Configuration;

internal static class AutoConfigureInterceptorSourceBuilder
{
    public static string GetSource(IEnumerable<(InterceptableConfigurationBuilderMethodInfo Info, IEnumerable<InterceptableLocation> Locations)> infos)
    {
        int count = 0;

        StringBuilder sb = new();
        sb.AppendLine("""
            // <auto-generated />
            
            #nullable enable
            
            namespace System.Runtime.CompilerServices
            {
            #pragma warning disable CS9113 // Parameter is unread.
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                [global::System.AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute(int version, string data) : Attribute;
            #pragma warning restore CS9113 // Parameter is unread.
            }
            
            namespace DTasks.Configuration
            {
                public static class DTasksConfigurationInterceptors
                {
            """);

        foreach ((InterceptableConfigurationBuilderMethodInfo methodInfo, IEnumerable<InterceptableLocation> locations) in infos)
        {
            foreach (InterceptableLocation location in locations)
            {
                sb
                    .Append("        ")
                    .AppendLine(location.GetInterceptsLocationAttributeSyntax());
            }

            sb
                .Append("        public static ")
                .Append(methodInfo.ReturnType)
                .Append(' ')
                .Append(methodInfo.Name)
                .Append("_Interceptor_")
                .Append(++count)
                .Append('(');

            if (!methodInfo.IsStatic)
            {
                sb
                    .Append("this ")
                    .Append(methodInfo.ContainingTypeFullName)
                    .Append(" @this, ");
            }

            for (var i = 0; i < methodInfo.ParameterTypes.Length; i++)
            {
                var parameterType = methodInfo.ParameterTypes[i];
                if (i != 0)
                {
                    sb.Append(", ");
                }
                else if (methodInfo.IsExtension)
                {
                    sb.Append("this ");
                }

                sb
                    .Append(parameterType)
                    .Append(" arg")
                    .Append(i);
            }

            sb
                .AppendLine(")")
                .AppendLine("        {")
                .Append("            ");

            if (methodInfo.ReturnType != "void")
            {
                sb.Append("return ");
            }

            sb.Append(methodInfo.IsStatic
                ? methodInfo.ContainingTypeFullName
                : "@this");

            sb
                .Append('.')
                .Append(methodInfo.Name)
                .Append('(');
            
            for (var i = 0; i < methodInfo.ParameterTypes.Length; i++)
            {
                if (i != 0)
                {
                    sb.Append(", ");
                }

                if (i == methodInfo.ConfigurationBuilderParameterPosition)
                {
                    sb
                        .Append("builder => arg")
                        .Append(i)
                        .Append("(builder.AutoConfigure())");
                }
                else
                {
                    sb
                        .Append("arg")
                        .Append(i);
                }
            }

            sb
                .AppendLine(");")
                .AppendLine("        }");
        }

        sb.AppendLine("""
                }
            }
            """);

        return sb.ToString();
    }
}