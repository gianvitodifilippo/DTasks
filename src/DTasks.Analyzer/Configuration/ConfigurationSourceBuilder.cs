using System.Diagnostics;
using System.Text;

namespace DTasks.Analyzer.Configuration;

internal readonly ref struct ConfigurationSourceBuilder(StringBuilder sb)
{
    public void Begin()
    {
        sb.AppendLine("""
            // <auto-generated />
            
            namespace DTasks.Configuration;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DTasks.Analyzer", "0.4.0.0")]
            internal static class DefaultDTasksConfigurationBuilderExtensions
            {
                public static TBuilder AutoConfigure<TBuilder>(this TBuilder builder)
                    where TBuilder : global::DTasks.Configuration.IDTasksConfigurationBuilder
                {
                    builder.ConfigureMarshaling(marshaling =>
                    {
                        marshaling.RegisterDAsyncMethods(typeof(DefaultDTasksConfigurationBuilderExtensions).Assembly);
            """);
    }

    public void End()
    {
        sb.Append("""
                    });
                    return builder;
                }
            }
            """);
    }

    public void AddInfrastructureBuilderInvocations(IEnumerable<ConfigurationBuilderInvocation> invocations)
    {
        sb.AppendLine("""
                        marshaling.ConfigureInfrastructure(infrastructure =>
                        {
            """);
        
        foreach (ConfigurationBuilderInvocation invocation in invocations)
        {
            (ConfigurationBuilderMethod method, string typeFullName) = invocation;
            switch (method)
            {
                case ConfigurationBuilderMethod.SurrogateDTaskOf:
                    sb.AppendLine($"                infrastructure.SurrogateDTaskOf<{typeFullName}>();");
                    break;
            
                case ConfigurationBuilderMethod.AwaitWhenAllOf:
                    sb.AppendLine($"                infrastructure.AwaitWhenAllOf<{typeFullName}>();");
                    break;
            
                default:
                    Debug.Fail("Unhandled method.");
                    break;
            }
        }

        sb.AppendLine("            });");
    }
}