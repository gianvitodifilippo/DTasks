using DTasks.Configuration;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

namespace DTasks.AspNetCore.Analyzer.Routing;

public class EndpointMappingGeneratorTests
{
    [Fact]
    public async Task MapAsyncGet_GeneratesCorrespondingExtensionMethodAndConfiguration()
    {
        await RunTestAsync(
            source: """
                endpoints.MapAsyncGet("pattern", async (
                    [FromServices] object arg1,
                    [FromBody] string arg2) =>
                {
                    return 1;
                });
                """,
            method: """
                public static global::Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapAsyncGet(this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, global::System.String pattern, global::System.Func<global::System.Object, global::System.String, global::DTasks.DTask<global::System.Int32>> handler)
                {
                    return global::Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(endpoints, pattern, (global::Microsoft.AspNetCore.Http.HttpContext httpContext, [global::Microsoft.AspNetCore.Mvc.FromServicesAttribute] global::System.Object arg1, [global::Microsoft.AspNetCore.Mvc.FromBodyAttribute] global::System.String arg2) => global::Microsoft.AspNetCore.Http.DTasksHttpContextExtensions.RunAsync(httpContext, handler(arg1, arg2)));
                }
                """,
            configuration: """
                builder.DTasks.ConfigureServices(services =>
                {
                    services.RegisterDAsyncService<global::System.Object>();
                });
                builder.RegisterEndpointResult<global::System.Int32>();
                """);
    }
    
    [Fact]
    public async Task AsyncResultsSuccess_GeneratesCallToRegisterEndpointResult()
    {
        await RunTestAsync(
            source: """
                AsyncResults.Success(42);
                AsyncResults.Success("Hello, World!");
                """,
            method: string.Empty,
            configuration: """
                builder.RegisterEndpointResult<global::System.Int32>();
                builder.RegisterEndpointResult<global::System.String>();
                """);
    }
    
    [Fact]
    public async Task CallToMethodDecoratedWithAsyncResultAttribute_GeneratesCallToRegisterEndpointResult()
    {
        await RunTestAsync(
            source: """
                CreateResult();
                
                [return: AsyncResult(typeof(int))]
                [return: AsyncResult(typeof(string))]
                static IResult CreateResult() => throw null!;
                """,
            method: string.Empty,
            configuration: """
                builder.RegisterEndpointResult<global::System.Int32>();
                builder.RegisterEndpointResult<global::System.String>();
                """);
    }
    
    [Fact]
    public async Task CallToPropertyWithGetterDecoratedWithAsyncResultAttribute_GeneratesCallToRegisterEndpointResult()
    {
        await RunTestAsync(
            source: """
                _ = Results.Result;
                
                static class Results
                {
                    public static IResult Result
                    {
                        [return: AsyncResult(typeof(int))]
                        [return: AsyncResult(typeof(string))]
                        get => throw null!;
                    }
                }
                """,
            method: string.Empty,
            configuration: """
                builder.RegisterEndpointResult<global::System.Int32>();
                builder.RegisterEndpointResult<global::System.String>();
                """);
    }
    
    private static async Task RunTestAsync(string source, string method, string configuration)
    {
        source = $"""
            using Microsoft.AspNetCore.Http;
            using Microsoft.AspNetCore.Mvc;
            using Microsoft.AspNetCore.Routing;
            using DTasks.AspNetCore.Http;
            using DTasks.AspNetCore.Metadata;
            
            IEndpointRouteBuilder endpoints = null!;
            
            {source}
            """;

        if (method != string.Empty)
        {
            method = string.Concat(method.Split(Environment.NewLine)
                .Select(line => $"{Environment.NewLine}    {line}"));
        }
        
        configuration = string.Join(Environment.NewLine, configuration.Split(Environment.NewLine)
            .Select(line => $"        {line}"));
        
        string expectedMethodSource = $$"""
            // <auto-generated />
            
            namespace Microsoft.AspNetCore.Routing;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DTasks.AspNetCore.Analyzer", "0.4.0.0")]
            internal static class DTasksEndpointBuilderExtensions
            {{{method}}
            }
            """;
        
        string expectedConfigurationSource = $$"""
            // <auto-generated />
            
            namespace DTasks.AspNetCore.Configuration;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("DTasks.AspNetCore.Analyzer", "0.4.0.0")]
            internal static class DTasksAspNetCoreCoreConfigurationBuilderExtensions
            {
                public static TBuilder AutoConfigure<TBuilder>(this TBuilder builder)
                    where TBuilder : IDTasksAspNetCoreCoreConfigurationBuilder
                {
            {{configuration}}
                    return builder;
                }
            }
            """;
        
        var test = new CSharpSourceGeneratorTest<EndpointMappingGenerator, DefaultVerifier>
        {
            ReferenceAssemblies = ReferenceAssemblies.Net.Net90,
            TestState =
            {
                OutputKind = OutputKind.ConsoleApplication,
                Sources = { source },
                GeneratedSources =
                {
                    (typeof(EndpointMappingGenerator), "DTasks.AspNetCore.Analyzer.Routing.g.cs", expectedMethodSource),
                    (typeof(EndpointMappingGenerator), "DTasks.AspNetCore.Analyzer.Configuration.g.cs", expectedConfigurationSource)
                },
                AdditionalReferences =
                {
                    typeof(IEndpointRouteBuilder).Assembly,
                    typeof(IEndpointConventionBuilder).Assembly,
                    typeof(FromServicesAttribute).Assembly,
                    typeof(DTask).Assembly,
                    typeof(IDTasksConfigurationBuilder).Assembly,
                    typeof(IDependencyInjectionDTasksConfigurationBuilder).Assembly,
                    typeof(AspNetCoreCoreDTasksConfigurationBuilderExtensions).Assembly,
                    typeof(AspNetCoreDTasksConfigurationBuilderExtensions).Assembly
                }
            }
        };
        
        await test.RunAsync();
    }
}