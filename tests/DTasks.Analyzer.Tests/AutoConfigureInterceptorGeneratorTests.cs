using DTasks.Configuration;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

namespace DTasks.Analyzer;

public class AutoConfigureInterceptorGeneratorTests
{
    [Fact(Skip = "How to set interceptor namespaces on test project?")]
    public async Task InterceptsCallsToConfigurationBuilder()
    {
        string source = """
            using DTasks.Configuration;
            
            namespace DTasks.Analyzer.Tests;
            
            class C
            {
                void M()
                {
                    DTasksConfiguration.Build(_ => {});
                }
            }
            """;

        string expected = """
            // <auto-generated />
            
            #nullable enable
            
            namespace System.Runtime.CompilerServices
            {
            #pragma warning disable CS9113 // Parameter is unread.
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                [global::System.AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute(int version, string data) : Attribute;
            #pragma warning restore CS9113 // Parameter is unread.
            }
            
            namespace DTasks.Configuration
            {
                public static class DTasksConfigurationInterceptors
                {
                    [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(1, "9yx/fcSx3WPioosmb0vsCngAAABUZXN0MC5jcw==")]
                    public static global::DTasks.Configuration.DTasksConfiguration Build_Interceptor_1(global::System.Action<global::DTasks.Configuration.IDTasksConfigurationBuilder> arg0)
                    {
                        return global::DTasks.Configuration.DTasksConfiguration.Build(builder => arg0(builder.AutoConfigure()));
                    }
                }
            }
            
            """;
        
        var test = new CSharpSourceGeneratorTest<AutoConfigureInterceptorGenerator, DefaultVerifier>
        {
            ReferenceAssemblies = ReferenceAssemblies.Net.Net90,
            
            TestState =
            {
                Sources = { source },
                GeneratedSources =
                {
                    (typeof(AutoConfigureInterceptorGenerator), "DTasks.Analyzer.Interceptors.g.cs", expected)
                },
                AdditionalReferences = { typeof(DTask).Assembly, typeof(DTasksConfiguration).Assembly }
            }
        };
        
        await test.RunAsync();
    }
}